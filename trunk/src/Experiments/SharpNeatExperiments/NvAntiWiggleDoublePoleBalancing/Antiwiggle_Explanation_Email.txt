Date: Wed, 20 Jul 2005 23:49:05 +0100
From: Colin Green <cgreen@dsl.pipex.com>
To:  neat@yahoogroups.com
Subject: Alternative double pole fitness function


Over the weekend I had a deeper look into the specifics of Gruau's 
anti-wiggle evaluation scheme, and following some experimentation I 
arrived at a new fitness function that makes some refinements to the 
scheme.

The first problem I could see is that Gruau's function runs for a 
maximum of 1000 timesteps (10 secs real time) and this isn't really long 
enough. I found that in general the evolved networks couldn't balance 
the poles for much longer than the 10 seconds. Gruau also had a 
generalisation test that may have evolved better networks, but this was 
only a post-search test, it wasn't part of the fitness function for 
driving evolution - because it was CPU intensive. To resolve this 
problem I increased the max timsteps to 50,000, which of course now 
introduces a new problem of the fitness function taking a lot of CPU as 
the networks get better and therefore balance the pole for longer, I'll 
get back to this point.

Another problem with Gruau's function is the specific use of  the 
'jiggle factor' (I coin this phrase for convienience). It is calculated 
for the last 100 timesteps(1 sec) and as such may be misleading, since 
if the system became unstable then it's likely that a lot of wiggling 
occured in the last second of a simulation. Therefore I switched to 
calculating this factor for the 100 timesteps from between 2secs and 
1sec ago - ignoring the last 1 sec.

I then switched to maintaining a sliding window (FIFO buffer) of the 
state variable used to calculate the jiggle factor, this then allows me 
to check the jiggle factor (from 2 to 1 sec ago) at each timstep, and if 
it passes a threshold then I stop the simulation. This saved wasting 
time simulating networks that just wiggle the poles for 50,000 timesteps.

A few other minor refinements were then necessary. Firstly I don't test 
the sliding jiggle factor until 5 secs has passed, this is on the basis 
that the system may have to oscillate quite a bit initially in order to 
get the system into a stable state, thus punishing oscillations will 
probably place the popualtion into a very poor part of fitness space for 
the overall task. On a similar note between 5secs and 6secs the jiggle 
factor is calculated for a sliding window for the 1 sec just gone, from 
6 secs on this becomes the sliding window from 1 to 2 secs ago.

It's worth noting that I tried quite a few (simpler)variations on this 
scheme before arriving at the ever-so-slightly convoluted scheme 
described! On to the results...

When starting with the long pole at 1 degree (all other parameters set 
to 0) the scheme works really well and finds good solutions quickly. The 
pole's are brought to an upright state and minimal movement of the cart 
is observed, some solutions still show some wiggling but not a lot. It's 
worth noting though that Gruau initialised the long pole at 4.5 degrees, 
and this task is much harder. Actually I've been trying 4 degrees and 
data from 4 runs gives mixed results:

1) Perfect solution(max possible fitness of 50,010.00) - 354 gens, 15 mins.
2) No good solution found (Max fitness 4,966.33) - 25,449 gens, 20 hours
3) Near perfect solution (Max fitness 50007.09) - 4474 gens, 4hrs 20mins
4) Near perfect solution (Max fitness 50004.25) - 23,597 gens, 31 hours.

Run 1 looks like something of a fluke, I noticed this sudden discovery 
of a good solution maybe twice over the weekend whilst experimenting 
(not including this one). So I wouldn't expect this to occur in 25% of 
runs as the data suggests! The fact that a simple solution must 
therefore exist but isn't found in 20 hours (run 2) lead me to my 
reasoning about avoiding certain areas of the fitness space. Surely this 
search must be stuck in a local optimum?

Colin.