<?xml version="1.0" encoding="utf-8" ?>
<Experiments>

  <Experiment name="Binary 3-Multiplexer (NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.BinaryThreeMultiplexer.BinaryThreeMultiplexerExperiment</ClassName>
    <Config>
      <PopulationSize>150</PopulationSize>
      <SpecieCount>10</SpecieCount>
      <Activation>
        <Scheme>Acyclic</Scheme>
      </Activation>
      <ComplexityRegulationStrategy>Absolute</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <Description>Binary 3-Multiplexer task with binary inputs/outputs.
Evaluation consists of testing a network against each of the 8 (=2^3) possible input combinations. An output less than 0.5 is considered a binary 0 answer, and >=0.5 a binary 1. However, fitness is scored based on how close a given network's response is to each correct answer, therefore the maximum fitness is 8 if exact answers are given, and the minimum possible fitness while still being correct overall is approx. 4.

To distinguish between correct low scorers and incorrect low scorers an additional value of 100 is added to the score of networks that give a correct response to each of the 8 test cases. Max fitness is therefore 108.
      </Description>
    </Config>
  </Experiment>

  <Experiment name="Binary 6-Multiplexer (NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.BinarySixMultiplexer.BinarySixMultiplexerExperiment</ClassName>
    <Config>
      <PopulationSize>500</PopulationSize>
      <SpecieCount>20</SpecieCount>
      <Activation>
        <Scheme>Acyclic</Scheme>
      </Activation>
      <ComplexityRegulationStrategy>Absolute</ComplexityRegulationStrategy>
      <ComplexityThreshold>50</ComplexityThreshold>
      <Description>Binary 6-Multiplexer task with binary inputs/outputs.
Evaluation consists of testing a network against each of the 64 (=2^6) possible input combinations. An output less than 0.5 is considered a binary 0 answer, and >=0.5 a binary 1. However, fitness is scored based on how close a given network's response is to each correct answer, therefore the maximum fitness is 64 if exact answers are given, and the minimum possible fitness while still being correct overall is approx 32.

To distinguish between correct low scorers and incorrect low scorers an additional value of 1000 is added to the score of networks that give a correct response to each of the 64 test cases. Max fitness is therefore 1064.
      </Description>
    </Config>
  </Experiment>

  <Experiment name="Binary 6-Multiplexer (RBF-NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.BinarySixMultiplexer.RbfBinarySixMultiplexerExperiment</ClassName>
    <Config>
      <PopulationSize>500</PopulationSize>
      <SpecieCount>20</SpecieCount>
      <Activation>
        <Scheme>Acyclic</Scheme>        
      </Activation>
      <ComplexityRegulationStrategy>Absolute</ComplexityRegulationStrategy>
      <ComplexityThreshold>50</ComplexityThreshold>
      <Description>
        Binary 6-Multiplexer task with binary inputs/outputs.
        Evaluation consists of testing a network against each of the 64 (=2^6) possible input combinations. An output less than 0.5 is considered a binary 0 answer, and >=0.5 a binary 1. However, fitness is scored based on how close a given network's response is to each correct answer, therefore the maximum fitness is 64 if exact answers are given, and the minimum possible fitness while still being correct overall is approx 32.

        To distinguish between correct low scorers and incorrect low scorers an additional value of 1000 is added to the score of networks that give a correct response to each of the 64 test cases. Max fitness is therefore 1064.
      </Description>
      <RbfAuxArgMutationConfig>
        <MutationSigmaCenter>0.1</MutationSigmaCenter>
        <MutationSigmaRadius>0.1</MutationSigmaRadius>
      </RbfAuxArgMutationConfig>
    </Config>
  </Experiment>

  <Experiment name="Binary 11-Multiplexer (NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.BinaryElevenMultiplexer.BinaryElevenMultiplexerExperiment</ClassName>
    <Config>
      <PopulationSize>1000</PopulationSize>
      <SpecieCount>50</SpecieCount>
      <Activation>
        <Scheme>Acyclic</Scheme>
      </Activation>
      <ComplexityRegulationStrategy>Relative</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <Description>Binary 11-Multiplexer task with binary inputs/outputs.
Evaluation consists of testing a network against each of the 2048 (=2^11) possible input combinations. An output less than 0.5 is considered a binary 0 answer, and >=0.5 a binary 1. However, fitness is scored based on how close a given network's response is to each correct answer, therefore the maximum fitness is 2048 if exact answers are given, and the minimum possible fitness while still being correct overall is approx 1024.

To distinguish between correct low scorers and incorrect low scorers an additional value of 10000 is added to the score of networks that give a correct response to each of the 2048 test cases. Max fitness is therefore 12048.
      </Description>
    </Config>
  </Experiment>

  <Experiment name="Binary 11-Multiplexer (RBF-NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.BinaryElevenMultiplexer.RbfBinaryElevenMultiplexerExperiment</ClassName>
    <Config>
      <PopulationSize>1000</PopulationSize>
      <SpecieCount>50</SpecieCount>
      <Activation>
        <Scheme>Acyclic</Scheme>
      </Activation>
      <ComplexityRegulationStrategy>Relative</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <Description>
        Binary 11-Multiplexer task with binary inputs/outputs.
        Evaluation consists of testing a network against each of the 2048 (=2^11) possible input combinations. An output less than 0.5 is considered a binary 0 answer, and >=0.5 a binary 1. However, fitness is scored based on how close a given network's response is to each correct answer, therefore the maximum fitness is 2048 if exact answers are given, and the minimum possible fitness while still being correct overall is approx 1024.

        To distinguish between correct low scorers and incorrect low scorers an additional value of 10000 is added to the score of networks that give a correct response to each of the 2048 test cases. Max fitness is therefore 12048.
      </Description>
      <RbfAuxArgMutationConfig>
        <MutationSigmaCenter>0.1</MutationSigmaCenter>
        <MutationSigmaRadius>0.1</MutationSigmaRadius>
      </RbfAuxArgMutationConfig>
    </Config>
  </Experiment>

  <Experiment name="Function Regression - Abs (NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.FunctionRegression.FunctionRegressionExperiment</ClassName>
    <Config>
      <PopulationSize>150</PopulationSize>
      <SpecieCount>10</SpecieCount>
      <Activation>
        <Scheme>Acyclic</Scheme>
      </Activation>
      <ComplexityRegulationStrategy>Absolute</ComplexityRegulationStrategy>
      <ComplexityThreshold>20</ComplexityThreshold>
      <Function>Abs</Function>
      <SampleResolution>11</SampleResolution>
      <SampleMin>-1.0</SampleMin>
      <SampleMax>1.0</SampleMax>
      <Description>
        Function Regression - Abs(x)
      </Description>
    </Config>
  </Experiment>

  <Experiment name="Function Regression - Log(x) (NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.FunctionRegression.FunctionRegressionExperiment</ClassName>
    <Config>
      <PopulationSize>150</PopulationSize>
      <SpecieCount>10</SpecieCount>
      <Activation>
        <Scheme>Acyclic</Scheme>
      </Activation>
      <ComplexityRegulationStrategy>Absolute</ComplexityRegulationStrategy>
      <ComplexityThreshold>20</ComplexityThreshold>
      <Function>Log</Function>
      <SampleResolution>21</SampleResolution>
      <SampleMin>1</SampleMin>
      <SampleMax>100</SampleMax>
      <Description>
        Function Regression - Log(x)
        Ln(x) evaluated over [1,100]
      </Description>
    </Config>
  </Experiment>

  <Experiment name="Function Regression - Positive Multiplication (NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.FunctionRegression.FunctionRegressionExperiment</ClassName>
    <Config>
      <PopulationSize>150</PopulationSize>
      <SpecieCount>10</SpecieCount>
      <Activation>
        <Scheme>Acyclic</Scheme>
      </Activation>
      <ComplexityRegulationStrategy>Relative</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <Function>Multiplication</Function>
      <SampleResolution>11</SampleResolution>
      <SampleMin>0.0</SampleMin>
      <SampleMax>1.0</SampleMax>
      <Description>Function Regression - Positive Multiplication
Two inputs are input with combinations of values over the range 0.0 to 1.0.
Sample resolution is 11, thus the sample values are 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0 and there are 11x11=121 sample points in total.
      </Description>
    </Config>
  </Experiment>

  <Experiment name="Function Regression - Sin(x) (NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.FunctionRegression.FunctionRegressionExperiment</ClassName>
    <Config>
      <PopulationSize>150</PopulationSize>
      <SpecieCount>10</SpecieCount>
      <Activation>
        <Scheme>Acyclic</Scheme>
      </Activation>
      <ComplexityRegulationStrategy>Absolute</ComplexityRegulationStrategy>
      <ComplexityThreshold>20</ComplexityThreshold>
      <Function>Sine</Function>      
      <SampleResolution>21</SampleResolution>
      <SampleMin>-3.14159</SampleMin>
      <SampleMax>3.14159</SampleMax>
      <Description>
        Function Regression - Sin(x)
Sin(x) evaluated over [-PI,+PI]     
      </Description>
    </Config>
  </Experiment>

  <!-- Uncomment to compare NEAT with RBF-NEAT version of experiment.
  <Experiment name="Function Regression - Sin(x^2) (NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.FunctionRegression.FunctionRegressionExperiment</ClassName>
    <Config>
      <PopulationSize>1000</PopulationSize>
      <SpecieCount>50</SpecieCount>
      <Activation>
        <Scheme>Acyclic</Scheme>
      </Activation>   
      <ComplexityRegulationStrategy>Relative</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>      
      <Function>SineXSquared</Function>
      <SampleResolution>100</SampleResolution>
      <SampleMin>0.0</SampleMin>
      <SampleMax>1.0</SampleMax>
      <Description>
        Function Regression - Sine(x^2)
        Sin(x) evaluated over [0,2PI]
      </Description>
    </Config>
  </Experiment>
  -->
  <Experiment name="Function Regression - Sin(x^2) (RBF-NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.FunctionRegression.RbfFunctionRegressionExperiment</ClassName>
    <Config>
      <PopulationSize>1000</PopulationSize>
      <SpecieCount>50</SpecieCount>
      <Activation>
        <Scheme>Acyclic</Scheme>
      </Activation>
      <ComplexityRegulationStrategy>Relative</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <Function>SineXSquared</Function>
      <SampleResolution>100</SampleResolution>
      <SampleMin>0.0</SampleMin>
      <SampleMax>1.0</SampleMax>
      <Description>
        Function Regression - Sine(x^2)
        Sin(x) evaluated over [0,2PI]
      </Description>
      <RbfAuxArgMutationConfig>
        <MutationSigmaCenter>0.1</MutationSigmaCenter>
        <MutationSigmaRadius>0.1</MutationSigmaRadius>
      </RbfAuxArgMutationConfig>
    </Config>
  </Experiment>  
  
  <Experiment name="Logical XOR (NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.Xor.XorExperiment</ClassName>
    <Config>
      <PopulationSize>150</PopulationSize>
      <SpecieCount>10</SpecieCount>
      <Activation>
        <Scheme>Acyclic</Scheme>
      </Activation>
      <ComplexityRegulationStrategy>Absolute</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <Description>Logical XOR. The goal is to reproduce the following logic truth table:
        In1 | In2 | Out
        -----------------
        0    | 0    | 0
        0    | 1    | 1
        1    | 0    | 1
        1    | 1    | 0

Each test case is tested in turn. An output less than 0.5 is interpreted as a 0(false) response, >= is interprested as a 1(true) response. Evaluation terminates early if a network fails to relax(settle on an output value) within 10 timesteps. A fitness of 1.0 is assigned for each correct test case, this is on a linear sliding scale that assigns 0 for a completey wrong response, e.g. 1.0 when 0.0 was expected. An additional fitness of 10 is assigned if all four test cases are passed. Thus the maximum fitness is 14, but any score >=10 indicates a sucessful network.
      </Description>

    </Config>
  </Experiment>
  
  <Experiment name="Pole Balancing[Double Pole] (NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.DoublePoleBalancing.DoublePoleBalancingExperiment</ClassName>
    <Config>
      <PopulationSize>150</PopulationSize>
      <SpecieCount>10</SpecieCount>
      <Activation>
        <Scheme>CyclicFixedIters</Scheme>
        <Iters>1</Iters>
      </Activation>
      <ComplexityRegulationStrategy>Absolute</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <Variant>DoublePole</Variant>
      <Description>Double Pole Balancing in 2D.

The experimental model consists of a cart on a rail with fixed length. The cart moves along the x-axis (x=0 represents the center of the rail). Two poles are attached to the cart with hinges that allow the poles to move left and right, the poles are different lengths which is required to make the task possible. Pole 1 is ten times longer and heavier than pole 2.

An external agent can push the cart with a variable force either left or right.

The model variables are:
  * Cart position on rail (x-axis).
  * Cart velocity.
  * Pole1 angle.
  * Pole1 angular velocity.
  * Pole2 angle.
  * Pole2 angular velocity.

All six variables are provided to the controller; the velocity inputs in particular make the task an easy one to solve with no hidden nodes required.

The task is for the controller to balance the pole for as long as possible by applying force to the cart.
  * Timesteps are in increments of 0.01 seconds.
  * Maximum timesteps for a trial is 100,000 (1000 seconds, or about 16 minutes clock time).

The controller is considered to have failed if the cart runs off the ends of the track and/or the pole angle is >= 36 degress

The model code was ported from the C/C++ code in NEAT by K.Stanley (http://www.cs.utexas.edu/users/kstanley/neat.html), that code in turn originated from the pole balancing simulator written by Richard Sutton and Charles Anderson.

This controller uses normalized, continous inputs rather than discretized inputs.
      </Description>
    </Config>
  </Experiment>

  <Experiment name="Pole Balancing[Double Pole NV] (NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.DoublePoleBalancing.DoublePoleBalancingExperiment</ClassName>
    <Config>
      <PopulationSize>150</PopulationSize>
      <SpecieCount>10</SpecieCount>
      <Activation>
        <Scheme>CyclicFixedIters</Scheme>
        <Iters>3</Iters>
      </Activation>    
      <ComplexityRegulationStrategy>Absolute</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <Variant>DoublePoleNv</Variant>
      <Description>Double Pole Balancing in 2D with No Velocity Inputs

The experimental model consists of a cart on a rail with fixed length. The cart moves along the x-axis (x=0 represents the center of the rail). Two poles are attached to the cart with hinges that allow the poles to move left and right, the poles are different lengths which is required to make the task possible. Pole 1 is ten times longer and heavier than pole 2.

An external agent can push the cart with a variable force either left or right.

The model variables are:
  * Cart position on rail (x-axis).
  * Cart velocity.
  * Pole1 angle.
  * Pole1 angular velocity.
  * Pole2 angle.
  * Pole2 angular velocity.

In this variant the controller is not provided with the velocity values, only the cart position and pole angles.

All six variables are provided to the controller; the velocity inputs in particular make the task an easy one to solve with no hidden nodes required.

The task is for the controller to balance the pole for as long as possible by applying force to the cart.
  * Timesteps are in increments of 0.01 seconds.
  * Maximum timesteps for a trial is 100,000 (1000 seconds, or about 16 minutes clock time).

The controller is considered to have failed if the cart runs off the ends of the track and/or the pole angle is >= 36 degress

The model code was ported from the C/C++ code in NEAT by K.Stanley (http://www.cs.utexas.edu/users/kstanley/neat.html), that code in turn originated from the pole balancing simulator written by Richard Sutton and Charles Anderson.

This controller uses normalized, continous inputs rather than discretized inputs.
      </Description>
    </Config>
  </Experiment>

  <Experiment name="Pole Balancing[Double Pole NV-AntiWiggle] (NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.DoublePoleBalancing.DoublePoleBalancingExperiment</ClassName>
    <Config>
      <PopulationSize>150</PopulationSize>
      <SpecieCount>10</SpecieCount>
      <Activation>
        <Scheme>CyclicFixedIters</Scheme>
        <Iters>3</Iters>
      </Activation>
      <ComplexityRegulationStrategy>Absolute</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <Variant>DoublePoleNvAntiWiggle</Variant>
      <Description>Double Pole Balancing in 2D with No Velocity Inputs and anti-wiggle evaluation scheme.

This version of the double pole balancing task addresses the observation that the task can be solved easily by rapidly oscillating the cart back and forth, potentially this is successful because it exploits the limits of the physics model's accuracy. See Antiwiggle_Explanation_Email.txt for a detailed explanation of the evaluation scheme.


The experimental model consists of a cart on a rail with fixed length. The cart moves along the x-axis (x=0 represents the center of the rail). Two poles are attached to the cart with hinges that allow the poles to move left and right, the poles are different lengths which is required to make the task possible. Pole 1 is ten times longer and heavier than pole 2.

An external agent can push the cart with a variable force either left or right.

The model variables are:
* Cart position on rail (x-axis).
* Cart velocity.
* Pole1 angle.
* Pole1 angular velocity.
* Pole2 angle.
* Pole2 angular velocity.

In this variant the controller is not provided with the velocity values, only the cart position and pole angles.

All six variables are provided to the controller; the velocity inputs in particular make the task an easy one to solve with no hidden nodes required.

The task is for the controller to balance the pole for as long as possible by applying force to the cart.
* Timesteps are in increments of 0.01 seconds.
* Maximum timesteps for a trial is 100,000 (1000 seconds, or about 16 minutes clock time).

The controller is considered to have failed if the cart runs off the ends of the track and/or the pole angle is >= 36 degress

The model code was ported from the C/C++ code in NEAT by K.Stanley (http://www.cs.utexas.edu/users/kstanley/neat.html), that code in turn originated from the pole balancing simulator written by Richard Sutton and Charles Anderson.

This controller uses normalized, continous inputs rather than discretized inputs.
      </Description>
    </Config>
  </Experiment>
  <!-- SinglePoleBalancingExperiment has been superceded by SinglePoleBalancingBox2DExperiment. That domain uses the tried and tested Box2D physics engine and also has visualisation. -->
  <!--
  <Experiment name="Pole Balancing[Single Pole] (NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.SinglePoleBalancing.SinglePoleBalancingExperiment</ClassName>
    <Config>
      <PopulationSize>150</PopulationSize>
      <SpecieCount>10</SpecieCount>
      <Activation>
        <Scheme>CyclicFixedIters</Scheme>
        <Iters>1</Iters>
      </Activation>
      <ComplexityRegulationStrategy>Absolute</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <Variant>DoublePole</Variant>
      <Description>
        Single Pole Balancing in 2D.

        The experimental model consists of a cart on a rail with fixed length. The cart moves along the x-axis (x=0 represents the center of the rail). A single poles is attached to the cart with a hinge that allows the pole to move left and right.

        An external agent can push the cart with a fixed force of 10 Newtons either left or right.

        The model variables are:
        * Cart position on rail (x-axis).
        * Cart velocity.
        * Pole1 angle.
        * Pole1 angular velocity.

        All four variables are provided to the controller; the velocity input in particular make the task an easy one to solve with no hidden nodes required.

        The task is for the controller to balance the pole for as long as possible by applying force to the cart.
        * Timesteps are in increments of 0.01 seconds.
        * Maximum timesteps for a trial is 100,000 (1000 seconds, or about 16 minutes clock time).

        The controller is considered to have failed if the cart runs off the ends of the track and/or the pole angle is >= 12 degress

        The model code was ported from the C/C++ code in NEAT by K.Stanley (http://www.cs.utexas.edu/users/kstanley/neat.html), that code in turn originated from the pole balancing simulator written by Richard Sutton and Charles Anderson.
      </Description>
    </Config>
  </Experiment>  
  -->
  
  <Experiment name="Prey Capture (NEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.PreyCapture.PreyCaptureExperiment</ClassName>
    <Config>
      <PopulationSize>150</PopulationSize>
      <SpecieCount>10</SpecieCount>
      <Activation>
        <Scheme>CyclicFixedIters</Scheme>
        <Iters>3</Iters>
      </Activation>
      <ComplexityRegulationStrategy>Relative</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <TrialsPerEvaluation>100</TrialsPerEvaluation>
      <GridSize>24</GridSize>
      <PreyInitMoves>0</PreyInitMoves>
      <PreySpeed>0.1</PreySpeed>
      <SensorRange>4.5</SensorRange>
      <MaxTimesteps>100</MaxTimesteps>
      <Description>Prey capture within a 24x24 grid. As described in Incremental Evolution Of Complex General Behavior, Faustino Gomez and Risto Miikkulainen (1997), Adaptive Behavior, 5:317-342, 1997.
The paper can be found online at http://nn.cs.utexas.edu/downloads/papers/gomez.adaptive-behavior.pdf

A prey and an agent each occupy a single square within a 24x24 grid of squares. The agent must catch the prey. The prey is controlled by simple stochasitic rules - with probability of moving away from the agent increasing with proximity. The agent is controlled by the evolved 'brain', with sensor inputs and motor outputs for move north, east, south, west.

Each trial consists of up to 100 timesteps. If the agent catches the prey within the time limit it scores 1. The agent is trialled 100 times to get a score from 0 to 100.

Difficulty of the task can be varying
- Number of 'head start' moves for the prey
- Prey speed.
- Max number of timesteps.
- Agent sensor range.
      </Description>
    </Config>
  </Experiment>  
  
  <Experiment name="Boxes Visual Discrimination (HyperNEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.BoxesVisualDiscrimination.BoxesVisualDiscriminationExperiment</ClassName>
    <Config>
      <PopulationSize>500</PopulationSize>
      <SpecieCount>40</SpecieCount>
      <ActivationCppn>
        <Scheme>CyclicFixedIters</Scheme>
        <Iters>4</Iters>
      </ActivationCppn>
      <Activation>
        <Scheme>CyclicFixedIters</Scheme>
        <Iters>1</Iters>
      </Activation>
      <ComplexityRegulationStrategy>Relative</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <LengthCppnInput>false</LengthCppnInput>
      <Resolution>11</Resolution>
      <Description>Boxes Visual Discrimination Task, as described in:
'A Hypercube-Based Encoding for Evolving Large-Scale Neural Networks', Kenneth O. Stanley, David B. D'Ambrosio, and Jason Gauci (2009)
http://eplex.cs.ucf.edu/publications/2009/stanley.alife09.html

The task involves a visual field of 11x11 binary pixels (on/off, black/white). The field contains two boxes, one small and one large box that has an edge length 3x that of the smaller box. The goal is to identify the center pixel of the larger box.

A single evaluation consists of 75 test cases with the two boxes randomly positioned. The root mean squared distance between selected and target pixels is scaled and translated to a range of 0-100, where 0 = no better than an agent randomly selecting pixels and 100 = perfect. In addition to this the range of output values is scaled to 0-10 and added to the final score, this encourages solutions with a wide output range between the highest activation (the selected pixel) and the lowest activation (this encourages prominent/clear selection).

The problem domain view allows the performance of the best genome to be observed. The view also allows the HyperNEAT genome to be decoded using a range of visual field pixel resolutions beyond the 11x11 resolution that genomes are trained with. The ability to do this is a feature of HyperNEAT - the evolved genomes are Compositional Pattern Producing Networks (CPPNs). A CPPN defines the connection strength between nodes positioned in some euclidean space and therefore we can use a CPPN to produce neural networks with more nodes by increasing the number and density of nodes.
      </Description>
    </Config>
  </Experiment>

  <Experiment name="Boxes Visual Discrimination w/length input (HyperNEAT)">
    <AssemblyPath>SharpNeatDomains.dll</AssemblyPath>
    <ClassName>SharpNeat.Domains.BoxesVisualDiscrimination.BoxesVisualDiscriminationExperiment</ClassName>
    <Config>
      <PopulationSize>500</PopulationSize>
      <SpecieCount>40</SpecieCount>
      <ActivationCppn>
        <Scheme>CyclicFixedIters</Scheme>
        <Iters>4</Iters>
      </ActivationCppn>
      <Activation>
        <Scheme>CyclicFixedIters</Scheme>
        <Iters>1</Iters>
      </Activation>      
      <ComplexityRegulationStrategy>Absolute</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>      
      <LengthCppnInput>true</LengthCppnInput>
      <Resolution>11</Resolution>
      <Description>Boxes Visual Discrimination Task, as described in:
'A Hypercube-Based Encoding for Evolving Large-Scale Neural Networks', Kenneth O. Stanley, David B. D'Ambrosio, and Jason Gauci (2009)
http://eplex.cs.ucf.edu/publications/2009/stanley.alife09.html

This vesion of the task provides an additional input to the CPPN that provides the length of each connection being queried.

The task involves a visual field of 11x11 binary pixels (on/off, black/white). The field contains two boxes, one small and one large box that has an edge length 3x that of the smaller box. The goal is to identify the center pixel of the larger box.

A single evaluation consists of 75 test cases with the two boxes randomly positioned. The root mean squared distance between selected and target pixels is scaled and translated to a range of 0-100, where 0 = no better than an agent randomly selecting pixels and 100 = perfect. In addition to this the range of output values is scaled to 0-10 and added to the final score, this encourages solutions with a wide output range between the highest activation (the selected pixel) and the lowest activation (this encourages prominent/clear selection).

The problem domain view allows the performance of the best genome to be observed. The view also allows the HyperNEAT genome to be decoded using a range of visual field pixel resolutions beyond the 11x11 resolution that genomes are trained with. The ability to do this is a feature of HyperNEAT - the evolved genomes are Compositional Pattern Producing Networks (CPPNs). A CPPN defines the connection strength between nodes positioned in some euclidean space and therefore we can use a CPPN to produce neural networks with more nodes by increasing the number and density of nodes.
      </Description>
    </Config>
  </Experiment>  
</Experiments>