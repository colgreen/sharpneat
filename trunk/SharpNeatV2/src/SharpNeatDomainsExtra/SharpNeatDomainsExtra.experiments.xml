<?xml version="1.0" encoding="utf-8" ?>
<Experiments>
  <Experiment name="Pole Balancing [Single Pole / Box2D] (NEAT)">
    <AssemblyPath>SharpNeatDomainsExtra.dll</AssemblyPath>
    <ClassName>SharpNeat.DomainsExtra.SinglePoleBalancingBox2d.SinglePoleBalancingBox2dExperiment</ClassName>
    <Config>
      <PopulationSize>150</PopulationSize>
      <SpecieCount>10</SpecieCount>
      <Activation>
        <Scheme>CyclicFixedIters</Scheme>
        <Iters>1</Iters>
      </Activation>
      <ComplexityRegulationStrategy>Absolute</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <Description>
        Single Pole Balancing in 2D, with physics simulation in Box2D. This domain is also known as the inverted pendulum.

        The problem consists of a cart on a rail with fixed length. The cart moves along the x-axis (x=0 represents the center of the rail).
        A single pole is attached to the cart with a hinge that allows the pole to move left and right.

        An external agent can push the cart with a fixed force of 100 Newtons either left or right.

        The task is for the controller to balance the pole for as long as possible by applying force to the cart.
        * Timesteps are in increments of 1/60th of a second.
        * Maximum timesteps for a trial is 21,600 (6 minutes clock time).

        The controller is considered to have failed if the cart runs off the ends of the track and/or abs(pole angle) is >= 12 degress within the trial time.

        The model state variables are:
        * Cart position on rail (x-axis).
        * Cart velocity.
        * Pole angle.
        * Pole angular velocity.

        All four variables are provided to the controller; the velocity inputs in particular make the task an easy one to solve with no hidden nodes required.
      </Description>
    </Config>
  </Experiment>

  <Experiment name="Single Pole Balancing / Swing-Up (NEAT)">
    <AssemblyPath>SharpNeatDomainsExtra.dll</AssemblyPath>
    <ClassName>SharpNeat.DomainsExtra.SinglePoleBalancingSwingUp.SinglePoleBalancingSwingUpExperiment</ClassName>
    <Config>
      <PopulationSize>500</PopulationSize>
      <SpecieCount>30</SpecieCount>
      <Activation>
        <Scheme>CyclicFixedIters</Scheme>
        <Iters>1</Iters>
      </Activation>
      <ComplexityRegulationStrategy>Absolute</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <Description>
       
      </Description>
    </Config>
  </Experiment>


  <Experiment name="Inverted Double Pendulum (NEAT)">
    <AssemblyPath>SharpNeatDomainsExtra.dll</AssemblyPath>
    <ClassName>SharpNeat.DomainsExtra.InvertedDoublePendulum.InvertedDoublePendulumExperiment</ClassName>
    <Config>
      <PopulationSize>500</PopulationSize>
      <SpecieCount>30</SpecieCount>
      <Activation>
        <Scheme>CyclicFixedIters</Scheme>
        <Iters>1</Iters>
      </Activation>
      <ComplexityRegulationStrategy>Absolute</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <Description>
        Inverted Double Pendulum in 2D, with physics simulation in Box2D.

        The problem consists of a cart on a rail with fixed length. The cart moves along the x-axis (x=0 represents the center of the rail).
        A pole is attached to the cart with a hinge that allows the pole to move left and right. The pole has a further hinged joint halfway
        along its length.

        An external agent can push the cart with a fixed force of 100 Newtons either left or right.

        The task is for the controller to balance the pole for as long as possible by applying force to the cart.
        * Timesteps are in increments of 1/60th of a second.
        * Maximum timesteps for a trial is 21,600 (6 minutes clock time).

        The controller is considered to have failed if the cart runs off the ends of the track and/or the height of the pole top falls below some threshold.

        The model state variables are:
        * Cart position on rail (x-axis).
        * Cart velocity.
        * Cart-Pole joint angle.
        * Cart-Pole joint angular velocity.
        * Pole elbow joint angle.
        * Pole elbow joint angular velocity.
      </Description>
    </Config>
  </Experiment>

  <Experiment name="Walker [Box2D] (NEAT)">
    <AssemblyPath>SharpNeatDomainsExtra.dll</AssemblyPath>
    <ClassName>SharpNeat.DomainsExtra.WalkerBox2d.WalkerBox2dExperiment</ClassName>
    <Config>
      <PopulationSize>4000</PopulationSize>
      <SpecieCount>100</SpecieCount>
      <Activation>
        <Scheme>CyclicFixedIters</Scheme>
        <Iters>1</Iters>
      </Activation>
      <ComplexityRegulationStrategy>Relative</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <Description>
      </Description>
    </Config>
  </Experiment>  
  
  <Experiment name="Walker [Box2D] (HyperNEAT)">
    <AssemblyPath>SharpNeatDomainsExtra.dll</AssemblyPath>
    <ClassName>SharpNeat.DomainsExtra.WalkerBox2d.WalkerBox2dExperimentHyperNeat</ClassName>
    <Config>
      <PopulationSize>2000</PopulationSize>
      <SpecieCount>50</SpecieCount>      
      <ActivationCppn>
        <Scheme>Acyclic</Scheme>
      </ActivationCppn>
      <Activation>
        <Scheme>CyclicFixedIters</Scheme>
        <Iters>1</Iters>
      </Activation>   
      <ComplexityRegulationStrategy>Relative</ComplexityRegulationStrategy>
      <ComplexityThreshold>10</ComplexityThreshold>
      <LengthCppnInput>false</LengthCppnInput>
      <Description>
      </Description>
    </Config>
  </Experiment> 
  
</Experiments>